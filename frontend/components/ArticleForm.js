import React, { useEffect, useState } from 'react'
import PT from 'prop-types'
import { topicOptions } from '../constants/topicOptions'


const initialFormValues = { title: '', text: '', topic: '' }

export default function ArticleForm(props) {
  const [values, setValues] = useState(initialFormValues)
  // âœ¨ proplarÄ±m nerede? burada... 
  const {postArticle, updateArticle, setCurrentArticleId, currentArticle, currentArticleId} = props

  useEffect(() => {
    // âœ¨ ekleyin
    // `currentArticle` prop'u her deÄŸiÅŸtiÄŸinde, doÄŸruluÄŸunu kontrol etmeliyiz:
    // eÄŸer doÄŸruysa title, text ve konusunu ilgili formda ayarlamalÄ±yÄ±z
	// eÄŸer deÄŸilse, formu baÅŸlangÄ±Ã§ deÄŸerlerine sÄ±fÄ±rlamalÄ±yÄ±z
    if(currentArticleId) {
      setValues({
        ...initialFormValues,
        title: currentArticle.title,
        text: currentArticle.text,
        topic: currentArticle.topic
      })
    }
	}, currentArticleId)

  const onChange = evt => {
    const { id, value } = evt.target
    setValues({ ...values, [id]: value })
  }

  const onSubmit = async(evt) => {
    evt.preventDefault()
    
    // âœ¨ ekleyin
    // `currentArticle` prop'unun doÄŸruluÄŸuna gÃ¶re yeni bir post gÃ¶ndermeliyiz ya da var olanÄ± gÃ¼ncellemeliyiz,
    if(currentArticleId) {
      await (updateArticle(currentArticleId, values))
    } else {
      await postArticle(values)
    }
    setValues(initialFormValues)
    setCurrentArticleId(null)
  }

  const isDisabled = () => {
    // âœ¨ ekleyin
    // inputlarÄ±n bazÄ± deÄŸerleri olup olmadÄ±ÄŸÄ±na dikkat edin
    
    if ((!values.text.trim().length >=1) ||
        (!values.title.trim().length >=1) ||
        !topicOptions.includes(values.topic)) {
          return true
    } else {
      return false
    }
  }

  const cancelEditing = (evt)=> {
    evt.preventDefault()
    setValues(initialFormValues)
    setCurrentArticleId(null)
  }

  return (
    // âœ¨ JSX'i dÃ¼zenleyin: baÅŸlÄ±ÄŸÄ±n "DÃ¼zenle" ya da "OluÅŸtur" olarak gÃ¶rÃ¼ntÃ¼lenmesini saÄŸlayÄ±n
    // ve Function.prototype'Ä± uygun fonksiyonla deÄŸiÅŸtirin
    <form id="form" onSubmit={onSubmit}>
      <h2>{currentArticleId ? "GÃ¼ncelle" :  "Yeni Makale OluÅŸtur"}</h2>
      <input
        maxLength={50}
        onChange={onChange}
        value={values.title}
        placeholder="BaÅŸlÄ±k girin"
        id="title"
      />
      <textarea
        maxLength={200}
        onChange={onChange}
        value={values.text}
        placeholder="Metin girin"
        id="text"
      />
      <select onChange={onChange} id="topic" value={values.topic}>
        <option value="">-- Select topic --</option>
        {topicOptions.map((topic, index) => {
          return(
            <option value={topic} key={"topic_"+index}>{topic}</option>
          )
        })}
      </select>
      <div className="button-group">
        <button disabled={isDisabled()} id="submitArticle">GÃ¶nder</button>
        <button onClick={cancelEditing}>DÃ¼zenlemeyi iptal et</button>
      </div>
    </form>
  )
}

// ğŸ”¥ DokunmayÄ±n: LoginForm aÅŸaÄŸÄ±daki proplarÄ± birebir istiyor:
ArticleForm.propTypes = {
  postArticle: PT.func.isRequired,
  updateArticle: PT.func.isRequired,
  setCurrentArticleId: PT.func.isRequired,
  currentArticle: PT.shape({ // null ya da undefined olabilir,"oluÅŸturma" modu manasÄ±nda ("gÃ¼ncelle" nin zÄ±ttÄ± olarak)
    article_id: PT.number.isRequired,
    title: PT.string.isRequired,
    text: PT.string.isRequired,
    topic: PT.string.isRequired,
  })
}
